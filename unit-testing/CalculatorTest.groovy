class CalculatorTest extends GroovyTestCase {  private calc  static final NEG_NUMBERS   = [-2, -3, -4]  static final POS_NUMBERS   = [ 4,  5,  6]  static final MIXED_NUMBERS = [ 4, -6,  0]  void setUp() {    calc = new Calculator()  }  void testCalcHowManyFromSampleNumbers() {    check(0, NEG_NUMBERS, -1)    check(0, NEG_NUMBERS, -2)    check(2, NEG_NUMBERS, -4)    check(3, NEG_NUMBERS, -5)    check(0, POS_NUMBERS,  7)    check(0, POS_NUMBERS,  6)    check(2, POS_NUMBERS,  4)    check(3, POS_NUMBERS,  3)    check(0, MIXED_NUMBERS,  5)    check(1, MIXED_NUMBERS,  2)    check(1, MIXED_NUMBERS,  1)    check(1, MIXED_NUMBERS,  0)    check(2, MIXED_NUMBERS, -1)    check(3, MIXED_NUMBERS, -7)  }  void testInputDataUnchanged() {    def numbers = NEG_NUMBERS.clone()    def origLength = numbers.size()    calc.countHowManyBiggerThan(numbers, 0 /* don't care */)    assertLength(origLength, numbers.toArray())    assertArrayEquals(NEG_NUMBERS.toArray(), numbers.toArray())  }  void testCalcHowManyFromSampleStrings() {    check(2, ['Dog', 'Cat', 'Antelope'], 'Bird')  }  void testInputDataAssumptions() {    assertTrue(NEG_NUMBERS.every{ it < 0 })    assertTrue(POS_NUMBERS.every{ it > 0 })    assertContains(0, MIXED_NUMBERS as int[])    def negCount = 0    def posCount = 0    MIXED_NUMBERS.each {      if (it < 0) negCount++ else if (it > 0) posCount++    }    assert negCount > 0 && posCount > 0  }  private check(expectedCount, items, target) {    assertEquals(expectedCount, calc.countHowManyBiggerThan(items, target))  }}